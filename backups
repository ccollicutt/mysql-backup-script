#!/bin/bash

# TODO
# - error message for exiting in empty vars
# - check if getting dbnames actually worked
# - 

# 
# VARS
# 

# source config file
if [ ! -r /etc/mysql-backup/backup.conf ]; then
	logger -s "$0 ERROR: Can't read backup.conf, exiting..."
	exit 1
fi
# ssh key
if [ ! -r /etc/mysql-backup/backup ]; then
	logger -s "$0 ERROR: Can't read backup ssh file, exiting..."
	exit 1
fi
# MySQL user
if [ ! -r /etc/mysql-backup/my.cnf ]; then
	logger -s "$0 ERROR: Can't read backup my.conf file, exiting..."
	exit 1
fi

source /etc/mysql-backup/backup.conf

if [ -z "$MYSQL_BACKUP_DIR" ]; then
	exit 1
fi
if [ -z "$MYSQL_BACKUP_FILENAME" ]; then
	exit 1
fi
if [ -z "$REMOTE_HOST" ]; then
	exit 1
fi
if [ -z "$REMOTE_USER" ]; then
	exit 1
fi
if [ -z "$REMOTE_DIR" ]; then
	exit 1
fi

# This is an array b/c of how rsync works...
RSYNC_OPTIONS=(-avz --delete -e 'ssh -i /etc/mysql-backup/backup')
RSYNC=(rsync "${RSYNC_OPTIONS[@]}")
RES=0

#
# MAIN
# 

##### MYSQL #####
DBNAMES=`mysql --defaults-file=/etc/mysql-backup/my.cnf --execute="SHOW DATABASES" | awk '{print $1}' | grep -v ^Database$ | grep -v ^information_schema$ | grep -v ^mysql$ | grep -v ^performance_schema$ | tr \\\r\\\n ,\ `



# Dump the entire MySQL database
if ! /usr/bin/mysqldump --defaults-file=/etc/mysql-backup/my.cnf --opt --databases $DBNAMES | /bin/gzip > $MYSQL_BACKUP_FILENAME; then
	/usr/bin/logger -s "$0 ERROR: mysqldump failed, exiting..."
	exit 1
fi

# Delete backups older than 7 days
if ! /usr/bin/find $MYSQL_BACKUP_DIR -ctime +7 -type f -delete; then
	/usr/bin/logger -s "$0 ERROR: mysql backup deletion failed, exiting..."
	exit 1
fi

#### RSYNC ####

# mysql
"${RSYNC[@]}" "$MYSQL_BACKUP_DIR" "$REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR/"
RES=$?

if [ "$RES" != 0 ]; then
	/usr/bin/logger -s "$0 ERROR: rsync of $MYSQL_BACKUP_DIR failed, exiting..."
	exit 1
fi

exit 0
